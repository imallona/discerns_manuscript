### Rules for mapping with STAR and tophat

##################

# Run read mapping

##################
## STAR version STAR_2.5.3a
#### use STAR wrapper!?
### write wrapper for index creation!?








####################

# Preprocessing

##################

rule hisat2_extract_splice_sites:
    conda:
        op.join('envs', 'discerns_env.yaml')
    input: 
        gtf = get_gtf
    output:
        "reference/hisat2/splicesites/{which_reduced_gtf}.txt"
    shell:
        "python " + config["hisat2_dir"] + "hisat2_extract_splice_sites.py {input.gtf} > {output}"

        

## generate STAR gemome indices using the different reduced gtf files
rule generate_star_index:
    conda:
        op.join('envs', 'discerns_env.yaml')
    input:
        fasta = config['genome'],
        gtf = get_gtf
    output:
        uncomp_fasta = "reference/STAR/all_chr/{which_reduced_gtf}/uncomp_fasta.fa",
        # uncomp_fasta = op.splitext(config['genome'])[0],
        flag = "reference/STAR/all_chr/{which_reduced_gtf}/SAindex"
    log:
        op.join('logs', 'star_index_{which_reduced_gtf}.log')
    params:
        outdir = "reference/STAR/all_chr/{which_reduced_gtf}/"
    threads: 
        config["cores"]
    shell:
        """
        # pigz -d  --threads {threads} {input.fasta} --stdout > {output.uncomp_fasta}
        gunzip {input.fasta} --stdout > {output.uncomp_fasta}

        STAR --runMode genomeGenerate \
        --runThreadN {threads} --genomeDir {params.outdir} \
        --genomeFastaFiles {output.uncomp_fasta} \
        --sjdbGTFfile {input.gtf} -sjdbOverhang 100

        """

### use Hisat2 because tophat2 is on low maintenance???
rule generate_bowtie2_index:
    conda:
        op.join('envs', 'discerns_env.yaml')
    input:
        fasta = config['genome']
    output:
        "reference/bowtie2/all_chr/all_chr.rev.2.bt2",
        uncomp_fasta = temp(op.splitext(config['genome'])[0])
    params:
        prefix = "reference/bowtie2/all_chr/all_chr",
        seed = config["SEED"]
    threads: 
        config["cores"]
    shell:
        """
        mkdir -p {params.prefix}
        gunzip --keep {input.fasta} --stdout > {output.uncomp_fasta}
        
        bowtie2-build --seed {params.seed} -f {output.uncomp_fasta} {params.prefix}
        """

rule cp_fasta_2_bowtie_index:
    conda:
        op.join('envs', 'discerns_env.yaml')
    input:
        fasta = config['genome'],
        bowtie_index = "reference/bowtie2/all_chr/all_chr.rev.2.bt2"
    output:
        "reference/bowtie2/all_chr/all_chr.fa"
    threads:
        1
    shell:
        "gunzip --keep -d {input.fasta} --stdout > {output}"


rule generate_hisat2_index:
    conda:
        op.join('envs', 'discerns_env.yaml')
    input:
        fasta_comp = config['genome'],
        fasta = "reference/bowtie2/all_chr/all_chr.fa",
        splicesites = "reference/hisat2/splicesites/{which_reduced_gtf}.txt"
    output:
        idx = "reference/hisat2/all_chr/{which_reduced_gtf}/{which_reduced_gtf}_all_chr.1.ht2"
    params:
        prefix = "reference/hisat2/all_chr/{which_reduced_gtf}/{which_reduced_gtf}_all_chr",
        seed = config["SEED"]    
    threads:
        8
    shell:
        """
        hisat2-build -p {threads} --seed {params.seed} \
           --ss {input.splicesites} {input.fasta} {params.prefix}
        """

### we run 2 pass mapping for all parameters
rule star_mapping:
    conda:
        op.join('envs', 'discerns_env.yaml')
    input:
        fastq1 = "simulation/simulated_data/simulated_reads_1.fq",
        fastq2 = "simulation/simulated_data/simulated_reads_2.fq",
        star_index = "reference/STAR/all_chr/{which_reduced_gtf}/"
    output:
        bam1 = temp("simulation/mapping/STAR/{which_reduced_gtf}/{test_dirnames}/Aligned.out.bam"),
        bam2 = temp("simulation/mapping/STAR/{which_reduced_gtf}/{test_dirnames}/pass2_Aligned.out.bam"),
        sj1 = "simulation/mapping/STAR/{which_reduced_gtf}/{test_dirnames}/SJ.out.tab",
        sj2 = "simulation/mapping/STAR/{which_reduced_gtf}/{test_dirnames}/pass2_SJ.out.tab"
        # "{SIMDIR}mapping/{{sample}}.bam"
    params:
        outdir = "simulation/mapping/STAR/{which_reduced_gtf}/{test_dirnames}",
        test_param = get_star_param
    threads:
        config["cores"]
    log:
        log1 = "logs/mapping/STAR/{which_reduced_gtf}/{test_dirnames}.log",
        log2 = "logs/mapping/STAR/{which_reduced_gtf}/{test_dirnames}_pass2.log"
    shell:
        """
        STAR --genomeDir {input.star_index} --readFilesIn {input.fastq1} {input.fastq2} --runThreadN {threads} \
        --outFilterMultimapNmax 1 --outSAMtype BAM Unsorted --outFileNamePrefix {params.outdir}/ \
        --sjdbOverhang 100 --outSAMstrandField intronMotif --outSJfilterDistToOtherSJmin 10 0 0 0 {params.test_param} 2> {log.log1}
        STAR --genomeDir {input.star_index} --readFilesIn {input.fastq1} {input.fastq2} --runThreadN {threads} \
        --outFilterMultimapNmax 1 --outSAMtype BAM Unsorted --outFileNamePrefix {params.outdir}/pass2_ \
        --sjdbOverhang 100 --outSAMstrandField intronMotif --outSJfilterDistToOtherSJmin 10 0 0 0 \
        --sjdbFileChrStartEnd {output.sj1} {params.test_param} 2> {log.log2}
        """

        ## --outSAMstrandField intronMotif should create an XS attribute in the output file
        ##â€“outSAMattributes NH HI AS nM XS --> did not work, still no XS attribute in output file!
